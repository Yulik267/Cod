#include <iostream>
#include <unistd.h>
#include <time.h>

#define MAX_NR 100

void vector(int v[MAX_NR], int n) {
    srand(time(NULL));

    for (int i = 0; i < n; i++) {
        v[i] = rand() % 100;
    }
}

void aranjare(int n, int v[MAX_NR]) {
    int aux;

    for(int i = 0; i < n - 1; i++) {
        for (int j = 0; j < n - i - 1; j++) {
            if (v[j] > v[j + 1]) {
                aux = v[j];
                v[j] = v[j + 1];
                v[j + 1] = aux;
            }
        }
    }
}

int main() {
    int n, A[MAX_NR];
    do {
        system("cls");

        std::cout << "introduceti numarul de elemente din vector: (Max 100) \n";
        std::cin >> n;

        if(n > MAX_NR) {
            std::cout << "ati depasit numarul maxim (MAX 100), va rog reincercati...";
        }
    }while(n > MAX_NR);

    sleep(3);

        std::cout << "Vectorul de elemente inainte de aranjare: ";

    vector(A, n);
    for (int i = 0; i < n; i++) {
        std::cout << A[i] << " ";
    }

    sleep(3);

    std::cout << "\nvectorul de elemente dupa sortare: ";

    aranjare(n, A);

    for (int i = 0; i < n; i++) {
        std::cout << A[i] << " ";
    }

    return 0;

}

//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

#include <iostream>
#include <cstdlib>
#include <ctime>

#define MAX_NR 100

void vector(int v[MAX_NR], int n) {
    srand(time(NULL));

    for (int i = 0; i < n; i++) {
        v[i] = rand() % 100;
    }
}

void merge(int v[], int left, int mid, int right) {
    int n1 = mid - left + 1;
    int n2 = right - mid;

    int *L = new int[n1];
    int *R = new int[n2];

    for (int i = 0; i < n1; i++) {
        L[i] = v[left + i];
    }
    for (int j = 0; j < n2; j++) {
        R[j] = v[mid + 1 + j];
    }

    int i = 0, j = 0, k = left;

    while (i < n1 && j < n2) {
        if (L[i] <= R[j]) {
            v[k] = L[i];
            i++;
        } else {
            v[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        v[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        v[k] = R[j];
        j++;
        k++;
    }

    delete[] L;
    delete[] R;
}

void mergeSort(int v[], int left, int right) {
    if (left < right) {

        int mid = left + (right - left) / 2;

        mergeSort(v, left, mid);

        mergeSort(v, mid + 1, right);

        merge(v, left, mid, right);
    }
}

int main() {
    int n, A[MAX_NR];

    do {
        system("cls");

        std::cout << "Introduceti numarul de elemente din vector (Max 100): \n";
        std::cin >> n;

        if (n > MAX_NR) {
            std::cout << "Ati depasit numarul maxim (MAX 100), va rog reîncercați...\n";
        }
    } while (n > MAX_NR);

    std::cout << "Vectorul de elemente înainte de aranjare:\n";

    vector(A, n);
    for (int i = 0; i < n; i++) {
        std::cout << A[i] << " ";
    }
    std::cout << std::endl;

    mergeSort(A, 0, n - 1);

    std::cout << "Vectorul de elemente dupa aranjare:\n";
    for (int i = 0; i < n; i++) {
        std::cout << A[i] << " ";
    }
    std::cout << std::endl;

    return 0;
}